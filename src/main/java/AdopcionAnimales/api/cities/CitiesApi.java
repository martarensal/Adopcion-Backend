/**
 * NOTE: This class is auto generated by the swagger code generator program (3.0.5).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package AdopcionAnimales.api.cities;

import AdopcionAnimales.api.types.TypeResponse;
import AdopcionAnimales.api.users.UserPhoneChangeRequest;
import io.swagger.annotations.*;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;

import javax.validation.Valid;
import java.util.List;

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.SpringCodegen", date = "2021-02-24T16:55:56.237+01:00[Europe/Paris]")
@Api(value = "cities", description = "the cities API")
public interface CitiesApi {

    @ApiOperation(value = "Registers a city", nickname = "addCity", notes = "Adds a city to the system",authorizations = {
            @Authorization(value = "ApiKeyAuth")    }, tags={  })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "city created"),
        @ApiResponse(code = 400, message = "invalid input, object invalid"),
        @ApiResponse(code = 409, message = "an existing city already exists") })
    @RequestMapping(value = "/cities",
        consumes = { "application/json" },
        method = RequestMethod.POST)
    ResponseEntity<Void> addCity(@ApiParam(value = "City to add"  )  @Valid @RequestBody CityCreationRequest body);


    @ApiOperation(value = "Deletes a city", nickname = "deleteCity", notes = "", authorizations = {
        @Authorization(value = "ApiKeyAuth")    }, tags={  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "city deleted succesfully"),
        @ApiResponse(code = 400, message = "bad input parameter"),
        @ApiResponse(code = 404, message = "city not found"),
        @ApiResponse(code = 401, message = "The requested page needs a username and a password") })
    @RequestMapping(value = "/cities/{idCity}",
        method = RequestMethod.DELETE)
    ResponseEntity<Void> deleteCity(@ApiParam(value = "By passing in the appropriate idCity, you can delete the city.",required=true) @PathVariable("idCity") Long idCity);


    @ApiOperation(value = "Searches for a city", nickname = "searchCities", notes = "Searches for a city. This operation is permited for both user and admin", response = CityResponse.class, responseContainer = "List", authorizations = {
        @Authorization(value = "ApiKeyAuth")    }, tags={  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "The search was successfull", response = CityResponse.class, responseContainer = "List"),
        @ApiResponse(code = 401, message = "The requested page needs a username and a password"),
        @ApiResponse(code = 500, message = "Internal server error") })
    @RequestMapping(value = "/cities",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<List<CityResponse>> searchCities();

    @ApiOperation(value = "Modifies the city's name", nickname = "modifyCityName", notes = "The id of the city you want to modify", authorizations = {
            @Authorization(value = "ApiKeyAuth")    }, tags={  })
    @ApiResponses(value = {
            @ApiResponse(code = 400, message = "bad input parameter"),
            @ApiResponse(code = 200, message = "operation completed successfully"),
            @ApiResponse(code = 401, message = "The requested page needs a username and a password") })
    @RequestMapping(value = "/cities/{idCity}/name",
            consumes = { "application/json" },
            method = RequestMethod.PUT)
    ResponseEntity<Void> modifyCityName(@ApiParam(value = "",required=true) @PathVariable("idCity") Long idCity,@ApiParam(value = "The new city's name"  )  @Valid @RequestBody CityNameChangeRequest body);

    @ApiOperation(value = "Modifies the city's autonomousCommunity", nickname = "modifyCityautonomousCommunity", notes = "The id of the city you want to modify", authorizations = {
            @Authorization(value = "ApiKeyAuth")    }, tags={  })
    @ApiResponses(value = {
            @ApiResponse(code = 400, message = "bad input parameter"),
            @ApiResponse(code = 200, message = "operation completed successfully"),
            @ApiResponse(code = 401, message = "The requested page needs a username and a password") })
    @RequestMapping(value = "/cities/{idCity}/autonomousCommunity",
            consumes = { "application/json" },
            method = RequestMethod.PUT)
    ResponseEntity<Void> modifyCityAutonomousCommunity(@ApiParam(value = "",required=true) @PathVariable("idCity") Long idCity,@ApiParam(value = "The new city's autonomousCommunity"  )  @Valid @RequestBody CityAutonomousCommunityChangeRequest body);


    @ApiOperation(value = "Modifies the city's province", nickname = "modifyCityProvince", notes = "The id of the city you want to modify", authorizations = {
            @Authorization(value = "ApiKeyAuth")    }, tags={  })
    @ApiResponses(value = {
            @ApiResponse(code = 400, message = "bad input parameter"),
            @ApiResponse(code = 200, message = "operation completed successfully"),
            @ApiResponse(code = 401, message = "The requested page needs a username and a password") })
    @RequestMapping(value = "/cities/{idCity}/province",
            consumes = { "application/json" },
            method = RequestMethod.PUT)
    ResponseEntity<Void> modifyCityProvince(@ApiParam(value = "",required=true) @PathVariable("idCity") Long idCity,@ApiParam(value = "The new city's postal code"  )  @Valid @RequestBody CityProvinceChangeRequest body);

    @ApiOperation(value = "Searches for a city", nickname = "searchCity", notes = "Searches for a city. This operation is permited for both user and admin", response = TypeResponse.class, responseContainer = "List", authorizations = {
            @Authorization(value = "ApiKeyAuth")    }, tags={  })
    @ApiResponses(value = {
            @ApiResponse(code = 200, message = "The search was successfull", response = TypeResponse.class, responseContainer = "List"),
            @ApiResponse(code = 401, message = "The requested page needs a username and a password"),
            @ApiResponse(code = 500, message = "Internal server error") })
    @RequestMapping(value = "/cities/{idCity}",
            produces = { "application/json" },
            method = RequestMethod.GET)
    ResponseEntity<CityResponse> searchCity(@ApiParam(value = "",required=true) @PathVariable("idAnimal") String idAnimal, @ApiParam(value = "",required=true) @PathVariable("idCity") String idCity);

}
