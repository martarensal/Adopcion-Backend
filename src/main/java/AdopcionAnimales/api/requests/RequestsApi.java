/**
 * NOTE: This class is auto generated by the swagger code generator program (3.0.5).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package AdopcionAnimales.api.requests;

import AdopcionAnimales.api.animals.AnimalPaginatedResponse;
import AdopcionAnimales.api.publications.PublicationDateChangeRequest;
import io.swagger.annotations.*;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;

import javax.validation.Valid;

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.SpringCodegen", date = "2021-02-24T16:55:56.237+01:00[Europe/Paris]")
@Api(value = "requests", description = "the requests API")
public interface RequestsApi {

    @ApiOperation(value = "Adds a request", nickname = "addRequest", notes = "Adds a new request to the system", authorizations = {
        @Authorization(value = "ApiKeyAuth")    }, tags={  })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "request created"),
        @ApiResponse(code = 400, message = "invalid input, object invalid"),
        @ApiResponse(code = 401, message = "The requested page needs a username and a password") })
    @RequestMapping(value = "/requests",
        consumes = { "application/json" },
        method = RequestMethod.POST)
    ResponseEntity<Void> addRequest(@ApiParam(value = "Request to add"  )  @Valid @RequestBody RequestCreationRequest body);


    @ApiOperation(value = "Deletes a request", nickname = "deleteRequest", notes = "", authorizations = {
        @Authorization(value = "ApiKeyAuth")    }, tags={  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "reservation deleted succesfully"),
        @ApiResponse(code = 400, message = "bad input parameter"),
        @ApiResponse(code = 404, message = "reservation not found"),
        @ApiResponse(code = 401, message = "The requested page needs a username and a password") })
    @RequestMapping(value = "/requests/{idRequest}",
        method = RequestMethod.DELETE)
    ResponseEntity<Void> deleteRequest(@ApiParam(value = "By passing in the appropriate request ID, you can delete the request.",required=true) @PathVariable("idRequest") Long idRequest);

    @ApiOperation(value = "Obtains the request made by the user", nickname = "getRequestsFromUser", notes = "Searches for a request added by a user.", response = RequestPaginatedResponse.class, responseContainer = "List", authorizations = {
            @Authorization(value = "ApiKeyAuth")    }, tags={  })
    @ApiResponses(value = {
            @ApiResponse(code = 200, message = "The search was successfull", response = RequestPaginatedResponse.class),
            @ApiResponse(code = 401, message = "The requested page needs a username and a password"),
            @ApiResponse(code = 500, message = "Internal server error") })
    @RequestMapping(value = "users/{username}/requests",
            produces = { "application/json" },
            method = RequestMethod.GET)
    ResponseEntity<RequestPaginatedResponse> getRequestsFromUser(
            @ApiParam(value = "", required = true) @PathVariable("username") String username,
            @ApiParam(value = "the number of the page") @Valid @RequestParam(value = "page", required = false, defaultValue = "0") Integer page,
            @ApiParam(value = "the number of element per page") @Valid @RequestParam(value = "size", required = false, defaultValue = "25") Integer size);

    @ApiOperation(value = "List all requests", nickname = "getRequests", notes = "", response = RequestPaginatedResponse.class, authorizations = {
        @Authorization(value = "ApiKeyAuth")    }, tags={  })
    @ApiResponses(value = {
        @ApiResponse(code = 200, message = "The search was successfull", response = RequestPaginatedResponse.class),
        @ApiResponse(code = 401, message = "The requested page needs a username and a password"),
        @ApiResponse(code = 500, message = "Internal server error") })
    @RequestMapping(value = "/requests",
        produces = { "application/json" },
        method = RequestMethod.GET)
    ResponseEntity<RequestPaginatedResponse> getRequests( @ApiParam(value = "the number of the page") @Valid @RequestParam(value = "page", required = false, defaultValue = "0") Integer page,
                                                          @ApiParam(value = "the number of element per page") @Valid @RequestParam(value = "size", required = false, defaultValue = "25") Integer size);

    @ApiOperation(value = "Modifies the request's date and time", nickname = "modifyRequestStartDate", notes = "The request ID for the request you want to modify", authorizations = {
            @Authorization(value = "ApiKeyAuth")    }, tags={  })
    @ApiResponses(value = {
            @ApiResponse(code = 400, message = "bad input parameter"),
            @ApiResponse(code = 200, message = "operation completed successfully"),
            @ApiResponse(code = 401, message = "The requested page needs a username and a password") })
    @RequestMapping(value = "/requests/{idRequest}/requestStartDate",
            consumes = { "application/json" },
            method = RequestMethod.PUT)
    ResponseEntity<Void> modifyRequestStartDate(@ApiParam(value = "",required=true) @PathVariable("idRequest") Long idRquest,@ApiParam(value = "The request's new date and time"  )  @Valid @RequestBody RequestStartDateChangeRequest body);

    @ApiOperation(value = "Modifies the request's date and time", nickname = "modifyRequestEndDate", notes = "The request ID for the request you want to modify", authorizations = {
            @Authorization(value = "ApiKeyAuth")    }, tags={  })
    @ApiResponses(value = {
            @ApiResponse(code = 400, message = "bad input parameter"),
            @ApiResponse(code = 200, message = "operation completed successfully"),
            @ApiResponse(code = 401, message = "The requested page needs a username and a password") })
    @RequestMapping(value = "/requests/{idRequest}/requestEndDate",
            consumes = { "application/json" },
            method = RequestMethod.PUT)
    ResponseEntity<Void> modifyRequestEndDate(@ApiParam(value = "",required=true) @PathVariable("idRequest") Long idRquest,@ApiParam(value = "The request's new date and time"  )  @Valid @RequestBody RequestEndDateChangeRequest body);

    @ApiOperation(value = "Modifies the request's status", nickname = "modifyRequestStatus", notes = "The request ID for the request you want to modify", authorizations = {
            @Authorization(value = "ApiKeyAuth")    }, tags={  })
    @ApiResponses(value = {
            @ApiResponse(code = 400, message = "bad input parameter"),
            @ApiResponse(code = 200, message = "operation completed successfully"),
            @ApiResponse(code = 401, message = "The requested page needs a username and a password") })
    @RequestMapping(value = "/requests/{idRequest}/requestStatus",
            consumes = { "application/json" },
            method = RequestMethod.PUT)
    ResponseEntity<Void> modifyRequestStatus(@ApiParam(value = "",required=true) @PathVariable("idRequest") Long idRquest,@ApiParam(value = "The request's new status"  )  @Valid @RequestBody RequestStatusChangeRequest body);

    @ApiOperation(value = "Modifies the request's type", nickname = "modifyRequestType", notes = "The request ID for the request you want to modify", authorizations = {
            @Authorization(value = "ApiKeyAuth")    }, tags={  })
    @ApiResponses(value = {
            @ApiResponse(code = 400, message = "bad input parameter"),
            @ApiResponse(code = 200, message = "operation completed successfully"),
            @ApiResponse(code = 401, message = "The requested page needs a username and a password") })
    @RequestMapping(value = "/requests/{idRequest}/requestType",
            consumes = { "application/json" },
            method = RequestMethod.PUT)
    ResponseEntity<Void> modifyRequestType(@ApiParam(value = "",required=true) @PathVariable("idRequest") Long idRquest,@ApiParam(value = "The request's new type"  )  @Valid @RequestBody RequestTypeChangeRequest body);

}
